# Stage 1: Build the application
FROM node:18.16.1-slim as builder

# Setup the working directory
WORKDIR /usr/src/app

# Install dependencies
# apt-get update is combined with apt-get install to avoid using outdated packages
RUN apt-get update && apt-get install -y build-essential python3 tree

# Copy package.json and yarn.lock first
COPY package.json yarn.lock ./

# Copy the rest of the application code
COPY . .

# Debug: List contents of the current directory
RUN echo "Contents of /usr/src/app:" && ls -la

# Debug: Display the content of package.json if it exists
RUN cat package.json || echo "package.json not found"

# Install node dependencies
RUN yarn config set workspaces-experimental true
RUN yarn install

# set QUICK_BUILD to true to make the build faster for dev
ENV APP_CONFIG=config/docker-nginx-orthanc.js

# Debug: List contents after yarn install
RUN echo "Contents after yarn install:" && ls -la

# Build the application
RUN yarn run build

# # Stage 2: Bundle the built application into a Docker container which runs NGINX using Alpine Linux
FROM nginx:alpine

# # Create directories for logs and html content if they don't already exist
RUN mkdir -p /var/log/nginx /var/www/html


# # Copy build output to serve static files
COPY --from=builder /usr/src/app/platform/app/dist /var/www/html

# # Expose HTTP and HTTPS ports
EXPOSE 80 443

# # Start NGINX
CMD ["nginx", "-g", "daemon off;"]
